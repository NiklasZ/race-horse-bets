import math
import pandas
import random
import os
from src.logger import log


def get_processed_file(file_path):
    df = pandas.read_csv(file_path, dtype={'asatdatestr': str,  # bet cycle date
                                           'asattimestr': str,  # bet cycle time
                                           # These ids probably form a unique composite of some sort
                                           'meetid': str,  # 2 unique ids
                                           'performanceid': str,  # 290 unique ids
                                           'raceid': str,  # 11 unique ids
                                           # Seems to be combo of asatdate+meetid+performanceid+raceid
                                           'refid': str,
                                           'type': str,  # FINAL or INTER, but what does it mean?
                                           # bet type: place, win, quinella and omni.
                                           # Different types allow different bet combinations and accordingly pool dimensions.
                                           'pool': str,
                                           'ccy': str,  # currency: 83% HKD and 17% GBP
                                           # horse number  and bet amount
                                           # is the number of participating horses fixed or variable?
                                           'bet_amount_horse_nb_1': float,
                                           'bet_amount_horse_nb_2': float,
                                           'bet_amount_horse_nb_3': float,
                                           'bet_amount_horse_nb_4': float,
                                           'bet_amount_horse_nb_5': float,
                                           'bet_amount_horse_nb_6': float,
                                           'bet_amount_horse_nb_7': float,
                                           'bet_amount_horse_nb_8': float,
                                           'bet_amount_horse_nb_9': float,
                                           'bet_amount_horse_nb_10': float,
                                           'bet_amount_horse_nb_11': float,
                                           'bet_amount_horse_nb_12': float,
                                           'bet_amount_horse_nb_13': float,
                                           'bet_amount_horse_nb_14': float,
                                           # Composite identifier generated by me
                                           '_id': str,
                                           '_valid': str
                                           })
    log(f'Read in file of {len(df.index)} rows')
    return df


def generate_new_combination_indices(seed: str, length: int, combination_count: int) -> [[int]]:

    if math.factorial(length) < combination_count:
        raise Exception(f'Cannot generate more than {length}! = {math.factorial(length)} combinations.')

    existing = set()
    random.seed(seed)
    indices = range(0, length)
    combinations = []
    iterations = 0
    while len(combinations) < combination_count:
        combination = random.sample(indices, k=len(indices))
        key = ','.join(str(x) for x in combination)
        if key not in existing:
            existing.add(key)
            combinations.append(combination)
        iterations += 1

    log(f'Generated {len(combinations)} position combinations for {length} elements in {iterations} iterations')
    return combinations

# TODO finish
def remove_empty_directories(path:str):
    to_remove = []
    for entry in os.scandir(path):
        if not entry.is_file() and len(os.scandir(entry)):
            pass
            
        


if __name__ == '__main__':
    print(generate_new_combination_indices('bananas', 14, 1000))
